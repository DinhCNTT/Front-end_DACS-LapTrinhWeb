import { useState, useEffect } from "react";
import axios from "axios";
import "./ManageSubCategories.css"; // Th√™m CSS

const ManageSubCategories = () => {
    const [subCategories, setSubCategories] = useState([]);
    const [editingCategory, setEditingCategory] = useState(null);
    const [newName, setNewName] = useState("");
    const [message, setMessage] = useState("");

    useEffect(() => {
        fetchSubCategories();
    }, []);

    // üìå L·∫•y danh s√°ch danh m·ª•c con t·ª´ API
    const fetchSubCategories = async () => {
        try {
            const res = await axios.get("http://localhost:5133/api/admin/get-subcategories");
            setSubCategories(res.data);
        } catch (error) {
            console.error("L·ªói khi l·∫•y danh m·ª•c con:", error);
        }
    };

    // üìù B·∫Øt ƒë·∫ßu ch·ªânh s·ª≠a danh m·ª•c con
    const handleEdit = (category) => {
        setEditingCategory(category);
        setNewName(category.tenDanhMuc);
    };

    // ‚úÖ L∆∞u ch·ªânh s·ª≠a danh m·ª•c con
    const handleUpdate = async () => {
        if (!newName.trim()) return alert("T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");

        try {
            await axios.put(`http://localhost:5133/api/admin/update-subcategory/${editingCategory.maDanhMuc}`, {
                tenDanhMuc: newName,
            });
            setMessage("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
            setEditingCategory(null);
            fetchSubCategories();
        } catch (error) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t:", error);
            setMessage("L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c!");
        }
    };

    // ‚ùå X√≥a danh m·ª•c con
    const handleDelete = async (id) => {
        if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a danh m·ª•c n√†y?")) return;

        try {
            await axios.delete(`http://localhost:5133/api/admin/delete-subcategory/${id}`);
            setMessage("X√≥a th√†nh c√¥ng!");
            fetchSubCategories();
        } catch (error) {
            console.error("L·ªói khi x√≥a:", error);
            setMessage("L·ªói khi x√≥a danh m·ª•c!");
        }
    };

    return (
        <div className="subcategory-page-container">
            <h2>Qu·∫£n L√Ω Danh M·ª•c Con</h2>
            {message && <p className="message">{message}</p>}

            <table className="subcategory-table">
                <thead>
                    <tr>
                        <th>M√£ Danh M·ª•c</th>
                        <th>T√™n Danh M·ª•c</th>
                        <th>·∫¢nh</th>
                        <th>Icon</th>
                        <th>Danh M·ª•c Cha</th>
                        <th>Thao T√°c</th>
                    </tr>
                </thead>
                <tbody>
                    {subCategories.map((cat) => (
                        <tr key={cat.maDanhMuc}>
                            <td>{cat.maDanhMuc}</td>
                            <td>
                                {editingCategory?.maDanhMuc === cat.maDanhMuc ? (
                                    <input
                                        type="text"
                                        value={newName}
                                        onChange={(e) => setNewName(e.target.value)}
                                    />
                                ) : (
                                    cat.tenDanhMuc
                                )}
                            </td>
                            <td><img src={cat.anhDanhMuc} alt="·∫¢nh" className="category-image" /></td>
                            <td><img src={cat.icon} alt="Icon" className="category-icon" /></td>
                            <td>{cat.tenDanhMucCha}</td>
                            <td>
                                {editingCategory?.maDanhMuc === cat.maDanhMuc ? (
                                    <>
                                        <button className="save-btn" onClick={handleUpdate}>üíæ L∆∞u</button>
                                        <button className="cancel-btn" onClick={() => setEditingCategory(null)}>‚ùå H·ªßy</button>
                                    </>
                                ) : (
                                    <>
                                        <button className="edit-btn" onClick={() => handleEdit(cat)}>‚úèÔ∏è S·ª≠a</button>
                                        <button className="delete-btn" onClick={() => handleDelete(cat.maDanhMuc)}>üóëÔ∏è X√≥a</button>
                                    </>
                                )}
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};

export default ManageSubCategories;
